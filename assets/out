#!/bin/sh

set -e

exec 3>&1 # make stdout available as fd 3 for the result
exec 1>&2 # redirect all output to stderr for logging

PATH=/usr/local/bin:$PATH

source_dir=$1

if [ -z "$source_dir" ]; then
  echo "usage: $0 <path/to/source>" >&2
  exit 1
fi

mkdir -p $source_dir

payload=$(mktemp $TMPDIR/k8s-resource-request.XXXXXX)

cat > $payload <&0

url=$(jq -r '.source.url // ""' < $payload)
namespace=$(jq -r '.source.namespace // ""' < $payload)
spec_path=$(jq -r '.params.spec_path // ""' < $payload)

if [ -z "$url" ]; then
  echo "must specify source url"
  exit 1
fi

if [ -z "$namespace" ]; then
  echo "must specify source namespace"
  exit 1
fi

if [ -z "$spec_path" ]; then
  echo "must specify param spec_path"
  exit 1
fi

username=$(jq -r '.source.username // ""' < $payload)
if ! [ -z "$username" ]; then
  username="--username $username"
fi

password=$(jq -r '.source.password // ""' < $payload)
if ! [ -z "$password" ]; then
  password="--password $password"
fi

skip_tls_verify=$(jq -r '.source.skip_tls_verify // ""' < $payload)
if [ "$skip_tls_verify" = "true" ]; then
  insecure_skip_tls_verify="--insecure-skip-tls-verify"
fi

cert_data=$(jq -r '.source.cert_data // ""' < $payload)
if [ -n "${cert_data}" ]; then
  cert_file=$(mktemp $TMPDIR/k8s-resource-certfile.XXXXXX)
  echo -e "$cert_data" > $cert_file
  client_certificate="--client-certificate $cert_file"
fi

key_data=$(jq -r '.source.key_data // ""' < $payload)
if [ -n "$key_data" ]; then
  key_file=$(mktemp $TMPDIR/k8s-resource-keyfile.XXXXXX)
  echo -e "$key_data" > $key_file
  client_key="--client-key $key_file"
fi

ca_data=$(jq -r '.source.ca_data // ""' < $payload)
if [ -n "$ca_data" ]; then
  ca_file=$(mktemp $TMPDIR/k8s-resource-cafile.XXXXXX)
  echo -e "$ca_data" > $ca_file
  certificate_authority="--certificate-authority $ca_file"
fi

record=$(jq -r '.source.record // ""' < $payload)
if [ "$record" = "true" ]; then
  record="--record"
fi

cd $source_dir

/bin/sh -ec "kubectl apply \
  --server $url \
  $username \
  $password \
  --namespace $namespace \
  $insecure_skip_tls_verify \
  $client_certificate \
  $client_key \
  $certificate_authority \
  --filename $spec_path \
  $record"

if $(cat "$spec_path" | yq -e "(.kind == \"Deployment\")"); then
  /bin/sh -ec "kubectl rollout status \
    --server $url \
    $username \
    $password \
    --namespace $namespace \
    $insecure_skip_tls_verify \
    $client_certificate \
    $client_key \
    $certificate_authority \
    --filename $spec_path"
fi

timestamp=$(date)

jq -n '{
  "version": {
    "Updated at": $timestamp
  },
  "metadata": [
    {"name": "namespace", "value": $namespace}
  ]
}' --arg timestamp "$timestamp" --arg namespace "$namespace" >&3

exit 0
